// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SIERRA_Server.Models.EFModels
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<CouponCategory> CouponCategories { get; set; }
        public virtual DbSet<CouponSetting> CouponSettings { get; set; }
        public virtual DbSet<Dessert> Desserts { get; set; }
        public virtual DbSet<DessertCart> DessertCarts { get; set; }
        public virtual DbSet<DessertCartItem> DessertCartItems { get; set; }
        public virtual DbSet<DessertImage> DessertImages { get; set; }
        public virtual DbSet<DessertOrder> DessertOrders { get; set; }
        public virtual DbSet<DessertOrderDetail> DessertOrderDetails { get; set; }
        public virtual DbSet<DessertTag> DessertTags { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<DiscountGroup> DiscountGroups { get; set; }
        public virtual DbSet<DiscountGroupItem> DiscountGroupItems { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Lesson> Lessons { get; set; }
        public virtual DbSet<LessonCategory> LessonCategories { get; set; }
        public virtual DbSet<LessonImage> LessonImages { get; set; }
        public virtual DbSet<LessonOrder> LessonOrders { get; set; }
        public virtual DbSet<LessonOrderDetail> LessonOrderDetails { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<MemberCoupon> MemberCoupons { get; set; }
        public virtual DbSet<OrderStatus> OrderStatuses { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Specification> Specifications { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Sierra0801;User ID=sa5;Password=sa5");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.CategoryName).HasMaxLength(50);
            });

            modelBuilder.Entity<Coupon>(entity =>
            {
                entity.HasIndex(e => e.CouponCode, "UQ__Coupons__D349080069258FBE")
                    .IsUnique();

                entity.Property(e => e.CouponCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndAt).HasColumnType("datetime");

                entity.Property(e => e.StartAt).HasColumnType("datetime");

                entity.HasOne(d => d.CouponCategory)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.CouponCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Coupons__CouponC__534D60F1");

                entity.HasOne(d => d.DiscountGroup)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.DiscountGroupId)
                    .HasConstraintName("FK__Coupons__Discoun__5441852A");
            });

            modelBuilder.Entity<CouponCategory>(entity =>
            {
                entity.Property(e => e.CouponCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CouponSetting>(entity =>
            {
                entity.Property(e => e.CouponSettingName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.CouponSettings)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__CouponSet__Coupo__571DF1D5");
            });

            modelBuilder.Entity<Dessert>(entity =>
            {
                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.DessertName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduledPublishDate).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Desserts)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Desserts__Catego__3C69FB99");
            });

            modelBuilder.Entity<DessertCart>(entity =>
            {
                entity.HasIndex(e => e.UserName, "UQ__DessertC__BE50FDEFD0C3FCF8")
                    .IsUnique();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.MemberNameNavigation)
                    .WithOne(p => p.DessertCart)
                    .HasPrincipalKey<Member>(p => p.UserName)
                    .HasForeignKey<DessertCart>(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertCa__Membe__04E4BC85");
            });

            modelBuilder.Entity<DessertCartItem>(entity =>
            {
                entity.HasOne(d => d.DessertCart)
                    .WithMany(p => p.DessertCartItems)
                    .HasForeignKey(d => d.DessertCartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertCa__Desse__07C12930");

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertCartItems)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertCa__Desse__08B54D69");

                entity.HasOne(d => d.Specification)
                    .WithMany(p => p.DessertCartItems)
                    .HasForeignKey(d => d.SpecificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertCa__Speci__09A971A2");
            });

            modelBuilder.Entity<DessertImage>(entity =>
            {
                entity.HasKey(e => e.ImageId)
                    .HasName("PK__DessertI__7516F70C35483BAE");

                entity.Property(e => e.DessertImageName).HasMaxLength(255);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertImages)
                    .HasForeignKey(d => d.DessertId)
                    .HasConstraintName("FK__DessertIm__Desse__3F466844");
            });

            modelBuilder.Entity<DessertOrder>(entity =>
            {
                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryMethod)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscountInfo).HasMaxLength(200);

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.Recipient)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecipientAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RecipientPhone)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.DessertOrders)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__DessertOr__Coupo__7D439ABD");

                entity.HasOne(d => d.DessertOrderStatus)
                    .WithMany(p => p.DessertOrders)
                    .HasForeignKey(d => d.DessertOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Desse__7C4F7684");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.DessertOrders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Membe__7B5B524B");
            });

            modelBuilder.Entity<DessertOrderDetail>(entity =>
            {
                entity.Property(e => e.DessertName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertOrderDetails)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Desse__01142BA1");

                entity.HasOne(d => d.DessertOrder)
                    .WithMany(p => p.DessertOrderDetails)
                    .HasForeignKey(d => d.DessertOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Desse__00200768");
            });

            modelBuilder.Entity<DessertTag>(entity =>
            {
                entity.Property(e => e.DessertTagName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertTags)
                    .HasForeignKey(d => d.DessertId)
                    .HasConstraintName("FK__DessertTa__Desse__4222D4EF");
            });

            modelBuilder.Entity<Discount>(entity =>
            {
                entity.Property(e => e.EndAt).HasColumnType("datetime");

                entity.Property(e => e.StartAt).HasColumnType("datetime");

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.Discounts)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Discounts__Desse__59FA5E80");
            });

            modelBuilder.Entity<DiscountGroup>(entity =>
            {
                entity.Property(e => e.DiscountGroupName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DiscountGroupItem>(entity =>
            {
                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DiscountGroupItems)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DiscountG__Desse__4E88ABD4");

                entity.HasOne(d => d.DiscountGroup)
                    .WithMany(p => p.DiscountGroupItems)
                    .HasForeignKey(d => d.DiscountGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DiscountG__Disco__4D94879B");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasIndex(e => e.EmployeeName, "UQ__Employee__9158E42A6333BC86")
                    .IsUnique();

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ImageName).HasMaxLength(255);

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.Employees)
                    .UsingEntity<Dictionary<string, object>>(
                        "EmployeeToRole",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("RoleId").HasConstraintName("FK_EmployeeToRoles_Roles"),
                        r => r.HasOne<Employee>().WithMany().HasForeignKey("EmployeeId").HasConstraintName("FK_EmployeeToRoles_Employees"),
                        j =>
                        {
                            j.HasKey("EmployeeId", "RoleId");

                            j.ToTable("EmployeeToRoles");
                        });
            });

            modelBuilder.Entity<Lesson>(entity =>
            {
                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LessonDessert)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LessonDetail)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LessonEndTime).HasColumnType("datetime");

                entity.Property(e => e.LessonInfo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.LessonTime).HasColumnType("datetime");

                entity.Property(e => e.LessonTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.LessonCategory)
                    .WithMany(p => p.Lessons)
                    .HasForeignKey(d => d.LessonCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Lessons__LessonC__68487DD7");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.Lessons)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Lessons__Teacher__693CA210");
            });

            modelBuilder.Entity<LessonCategory>(entity =>
            {
                entity.Property(e => e.LessonCategoryName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<LessonImage>(entity =>
            {
                entity.Property(e => e.LessonImageName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Lesson)
                    .WithMany(p => p.LessonImages)
                    .HasForeignKey(d => d.LessonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonIma__Lesso__6C190EBB");
            });

            modelBuilder.Entity<LessonOrder>(entity =>
            {
                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountInfo).HasMaxLength(200);

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.OrderCancellationReason).HasMaxLength(200);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.LessonOrders)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__LessonOrd__Coupo__73BA3083");

                entity.HasOne(d => d.LessonOrderStatus)
                    .WithMany(p => p.LessonOrders)
                    .HasForeignKey(d => d.LessonOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Lesso__72C60C4A");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.LessonOrders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Membe__71D1E811");
            });

            modelBuilder.Entity<LessonOrderDetail>(entity =>
            {
                entity.Property(e => e.LessonTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Lesson)
                    .WithMany(p => p.LessonOrderDetails)
                    .HasForeignKey(d => d.LessonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Lesso__778AC167");

                entity.HasOne(d => d.LessonOrder)
                    .WithMany(p => p.LessonOrderDetails)
                    .HasForeignKey(d => d.LessonOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Lesso__76969D2E");
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.HasIndex(e => e.UserName, "UQ__Members__BE50FDEF0E387EEC")
                    .IsUnique();

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Birth).HasColumnType("datetime");

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DailyGamePlayed)
                    .IsRequired()
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ImageName).HasMaxLength(255);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WeeklyGamePlayed)
                    .IsRequired()
                    .HasDefaultValueSql("('False')");
            });

            modelBuilder.Entity<MemberCoupon>(entity =>
            {
                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpireAt).HasColumnType("datetime");

                entity.Property(e => e.UseAt).HasColumnType("datetime");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.MemberCoupons)
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberCou__Coupo__5DCAEF64");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MemberCoupons)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberCou__Membe__5EBF139D");
            });

            modelBuilder.Entity<OrderStatus>(entity =>
            {
                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.Property(e => e.PermissionName).HasMaxLength(50);
            });

            modelBuilder.Entity<Promotion>(entity =>
            {
                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.EndAt).HasColumnType("datetime");

                entity.Property(e => e.LaunchAt).HasColumnType("datetime");

                entity.Property(e => e.PromotionImage)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PromotionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartAt).HasColumnType("datetime");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.Promotions)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__Promotion__Coupo__628FA481");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.RoleDisplayName).HasMaxLength(50);

                entity.Property(e => e.RoleName).HasMaxLength(50);

                entity.HasMany(d => d.Permissions)
                    .WithMany(p => p.Roles)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoleToPermission",
                        l => l.HasOne<Permission>().WithMany().HasForeignKey("PermissionId").HasConstraintName("FK_RoleToPermissions_Permissions"),
                        r => r.HasOne<Role>().WithMany().HasForeignKey("RoleId").HasConstraintName("FK_RoleToPermissions_Roles"),
                        j =>
                        {
                            j.HasKey("RoleId", "PermissionId");

                            j.ToTable("RoleToPermissions");
                        });
            });

            modelBuilder.Entity<Specification>(entity =>
            {
                entity.ToTable("Specification");

                entity.Property(e => e.Flavor).HasMaxLength(50);

                entity.Property(e => e.Size).HasMaxLength(50);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.Specifications)
                    .HasForeignKey(d => d.DessertId)
                    .HasConstraintName("FK__Specifica__Desse__44FF419A");
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.Property(e => e.Academic)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Experience)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.License)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Specialty)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TeacherImage)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TeacherName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}