// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SIERRA_Server.Models.EFModels
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<CouponCategories> CouponCategories { get; set; }
        public virtual DbSet<CouponSettings> CouponSettings { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<DessertCartItems> DessertCartItems { get; set; }
        public virtual DbSet<DessertCarts> DessertCarts { get; set; }
        public virtual DbSet<DessertImages> DessertImages { get; set; }
        public virtual DbSet<DessertOrderDetails> DessertOrderDetails { get; set; }
        public virtual DbSet<DessertOrders> DessertOrders { get; set; }
        public virtual DbSet<DessertTags> DessertTags { get; set; }
        public virtual DbSet<Desserts> Desserts { get; set; }
        public virtual DbSet<DiscountGroupItems> DiscountGroupItems { get; set; }
        public virtual DbSet<DiscountGroups> DiscountGroups { get; set; }
        public virtual DbSet<Discounts> Discounts { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<LessonCategories> LessonCategories { get; set; }
        public virtual DbSet<LessonImages> LessonImages { get; set; }
        public virtual DbSet<LessonOrderDetails> LessonOrderDetails { get; set; }
        public virtual DbSet<LessonOrders> LessonOrders { get; set; }
        public virtual DbSet<Lessons> Lessons { get; set; }
        public virtual DbSet<MemberCoupons> MemberCoupons { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<OrderStatuses> OrderStatuses { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<Promotions> Promotions { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Specification> Specification { get; set; }
        public virtual DbSet<Teachers> Teachers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Sierra0743;Persist Security Info=True;User ID=sa5;Password=sa5");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Categories>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK__Categori__19093A0B5129B724");

                entity.Property(e => e.CategoryName).HasMaxLength(50);
            });

            modelBuilder.Entity<CouponCategories>(entity =>
            {
                entity.HasKey(e => e.CouponCategoryId)
                    .HasName("PK__CouponCa__799E5F0B77DAF30C");

                entity.Property(e => e.CouponCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CouponSettings>(entity =>
            {
                entity.HasKey(e => e.CouponSettingId)
                    .HasName("PK__CouponSe__022B600418599282");

                entity.Property(e => e.CouponSettingName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.CouponSettings)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__CouponSet__Coupo__6A30C649");
            });

            modelBuilder.Entity<Coupons>(entity =>
            {
                entity.HasKey(e => e.CouponId)
                    .HasName("PK__Coupons__384AF1BAD677426F");

                entity.HasIndex(e => e.CouponCode, "UQ__Coupons__D349080095A749AD")
                    .IsUnique();

                entity.Property(e => e.CouponCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndAt).HasColumnType("datetime");

                entity.Property(e => e.StartAt).HasColumnType("datetime");

                entity.HasOne(d => d.CouponCategory)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.CouponCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Coupons__CouponC__66603565");

                entity.HasOne(d => d.DiscountGroup)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.DiscountGroupId)
                    .HasConstraintName("FK__Coupons__Discoun__6754599E");
            });

            modelBuilder.Entity<DessertCartItems>(entity =>
            {
                entity.Property(e => e.Quantity)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.DessertCart)
                    .WithMany(p => p.DessertCartItems)
                    .HasForeignKey(d => d.DessertCartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertCa__Desse__1AD3FDA4");

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertCartItems)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertCa__Desse__1BC821DD");
            });

            modelBuilder.Entity<DessertCarts>(entity =>
            {
                entity.HasIndex(e => e.MemberName, "UQ__DessertC__BE50FDEF6F888575")
                    .IsUnique();

                entity.Property(e => e.MemberName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.MemberNameNavigation)
                    .WithOne(p => p.DessertCarts)
                    .HasPrincipalKey<Members>(p => p.MemberName)
                    .HasForeignKey<DessertCarts>(d => d.MemberName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertCa__Membe__17F790F9");
            });

            modelBuilder.Entity<DessertImages>(entity =>
            {
                entity.HasKey(e => e.ImageId)
                    .HasName("PK__DessertI__7516F70C0E5DB944");

                entity.Property(e => e.DessertImageName).HasMaxLength(255);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertImages)
                    .HasForeignKey(d => d.DessertId)
                    .HasConstraintName("FK__DessertIm__Desse__52593CB8");
            });

            modelBuilder.Entity<DessertOrderDetails>(entity =>
            {
                entity.HasKey(e => e.DessertOrderDetailId)
                    .HasName("PK__DessertO__2F9C51B9EFFCC18D");

                entity.Property(e => e.DessertName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertOrderDetails)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Desse__14270015");

                entity.HasOne(d => d.DessertOrder)
                    .WithMany(p => p.DessertOrderDetails)
                    .HasForeignKey(d => d.DessertOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Desse__1332DBDC");
            });

            modelBuilder.Entity<DessertOrders>(entity =>
            {
                entity.HasKey(e => e.DessertOrderId)
                    .HasName("PK__DessertO__112D4EEDAD0CF7E9");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeliveryMethod)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DiscountInfo).HasMaxLength(200);

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.Recipient)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecipientAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RecipientPhone)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.DessertOrders)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__DessertOr__Coupo__10566F31");

                entity.HasOne(d => d.DessertOrderStatus)
                    .WithMany(p => p.DessertOrders)
                    .HasForeignKey(d => d.DessertOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Desse__0F624AF8");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.DessertOrders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DessertOr__Membe__0E6E26BF");
            });

            modelBuilder.Entity<DessertTags>(entity =>
            {
                entity.HasKey(e => e.DessertTagId)
                    .HasName("PK__DessertT__81D7420A4E19B65B");

                entity.Property(e => e.DessertTagName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DessertTags)
                    .HasForeignKey(d => d.DessertId)
                    .HasConstraintName("FK__DessertTa__Desse__5535A963");
            });

            modelBuilder.Entity<Desserts>(entity =>
            {
                entity.HasKey(e => e.DessertId)
                    .HasName("PK__Desserts__2FF5148B00A0C94D");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.DessertName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ScheduledPublishDate).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Desserts)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Desserts__Catego__4F7CD00D");
            });

            modelBuilder.Entity<DiscountGroupItems>(entity =>
            {
                entity.HasKey(e => e.DiscountGroupItemId)
                    .HasName("PK__Discount__6B5FED7BBE6F263A");

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.DiscountGroupItems)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DiscountG__Desse__619B8048");

                entity.HasOne(d => d.DiscountGroup)
                    .WithMany(p => p.DiscountGroupItems)
                    .HasForeignKey(d => d.DiscountGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DiscountG__Disco__60A75C0F");
            });

            modelBuilder.Entity<DiscountGroups>(entity =>
            {
                entity.HasKey(e => e.DiscountGroupId)
                    .HasName("PK__Discount__2ACF1AEB81753F9D");

                entity.Property(e => e.DiscountGroupName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Discounts>(entity =>
            {
                entity.HasKey(e => e.DiscountId)
                    .HasName("PK__Discount__E43F6D96553A16B5");

                entity.Property(e => e.EndAt).HasColumnType("datetime");

                entity.Property(e => e.StartAt).HasColumnType("datetime");

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.Discounts)
                    .HasForeignKey(d => d.DessertId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Discounts__Desse__6D0D32F4");
            });

            modelBuilder.Entity<Employees>(entity =>
            {
                entity.HasIndex(e => e.EmployeeName, "UQ__Employee__9158E42A51422DB2")
                    .IsUnique();

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ImageName).HasMaxLength(255);

                entity.HasMany(d => d.Role)
                    .WithMany(p => p.Employee)
                    .UsingEntity<Dictionary<string, object>>(
                        "EmployeeToRoles",
                        l => l.HasOne<Roles>().WithMany().HasForeignKey("RoleId").HasConstraintName("FK_EmployeeToRoles_Roles"),
                        r => r.HasOne<Employees>().WithMany().HasForeignKey("EmployeeId").HasConstraintName("FK_EmployeeToRoles_Employees"),
                        j =>
                        {
                            j.HasKey("EmployeeId", "RoleId");

                            j.ToTable("EmployeeToRoles");
                        });
            });

            modelBuilder.Entity<LessonCategories>(entity =>
            {
                entity.HasKey(e => e.LessonCategoryId)
                    .HasName("PK__LessonCa__10E2893EB3C4B705");

                entity.Property(e => e.LessonCategoryName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<LessonImages>(entity =>
            {
                entity.HasKey(e => e.LessonImageId)
                    .HasName("PK__LessonIm__A7D3A24E02A7F1C0");

                entity.Property(e => e.LessonImageName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Lesson)
                    .WithMany(p => p.LessonImages)
                    .HasForeignKey(d => d.LessonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonIma__Lesso__7F2BE32F");
            });

            modelBuilder.Entity<LessonOrderDetails>(entity =>
            {
                entity.HasKey(e => e.LessonOrderDetailId)
                    .HasName("PK__LessonOr__6F3B533D2F51D959");

                entity.Property(e => e.LessonTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Lesson)
                    .WithMany(p => p.LessonOrderDetails)
                    .HasForeignKey(d => d.LessonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Lesso__0A9D95DB");

                entity.HasOne(d => d.LessonOrder)
                    .WithMany(p => p.LessonOrderDetails)
                    .HasForeignKey(d => d.LessonOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Lesso__09A971A2");
            });

            modelBuilder.Entity<LessonOrders>(entity =>
            {
                entity.HasKey(e => e.LessonOrderId)
                    .HasName("PK__LessonOr__D7FD33138ACC350C");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscountInfo).HasMaxLength(200);

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.OrderCancellationReason).HasMaxLength(200);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.LessonOrders)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__LessonOrd__Coupo__06CD04F7");

                entity.HasOne(d => d.LessonOrderStatus)
                    .WithMany(p => p.LessonOrders)
                    .HasForeignKey(d => d.LessonOrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Lesso__05D8E0BE");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.LessonOrders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LessonOrd__Membe__04E4BC85");
            });

            modelBuilder.Entity<Lessons>(entity =>
            {
                entity.HasKey(e => e.LessonId)
                    .HasName("PK__Lessons__B084ACD0C8835B5E");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LessonDessert)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LessonDetail)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.LessonEndTime).HasColumnType("datetime");

                entity.Property(e => e.LessonInfo)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.LessonTime).HasColumnType("datetime");

                entity.Property(e => e.LessonTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.LessonCategory)
                    .WithMany(p => p.Lessons)
                    .HasForeignKey(d => d.LessonCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Lessons__LessonC__7B5B524B");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.Lessons)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Lessons__Teacher__7C4F7684");
            });

            modelBuilder.Entity<MemberCoupons>(entity =>
            {
                entity.HasKey(e => e.MemberCouponId)
                    .HasName("PK__MemberCo__227AC287F5136670");

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpireAt).HasColumnType("datetime");

                entity.Property(e => e.UseAt).HasColumnType("datetime");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.MemberCoupons)
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberCou__Coupo__70DDC3D8");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MemberCoupons)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberCou__Membe__71D1E811");
            });

            modelBuilder.Entity<Members>(entity =>
            {
                entity.HasIndex(e => e.MemberName, "UQ__Members__BE50FDEFB962063E")
                    .IsUnique();

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Birth).HasColumnType("datetime");

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DailyGamePlayed)
                    .IsRequired()
                    .HasDefaultValueSql("('False')");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ImageName).HasMaxLength(255);

                entity.Property(e => e.MemberName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WeeklyGamePlayed)
                    .IsRequired()
                    .HasDefaultValueSql("('False')");
            });

            modelBuilder.Entity<OrderStatuses>(entity =>
            {
                entity.HasKey(e => e.OrderStatusId)
                    .HasName("PK__OrderSta__BC674CA15AE32F90");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Permissions>(entity =>
            {
                entity.Property(e => e.PermissionName).HasMaxLength(50);
            });

            modelBuilder.Entity<Promotions>(entity =>
            {
                entity.HasKey(e => e.PromotionId)
                    .HasName("PK__Promotio__52C42FCF0C61A206");

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.EndAt).HasColumnType("datetime");

                entity.Property(e => e.LaunchAt).HasColumnType("datetime");

                entity.Property(e => e.PromotionImage)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PromotionName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartAt).HasColumnType("datetime");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.Promotions)
                    .HasForeignKey(d => d.CouponId)
                    .HasConstraintName("FK__Promotion__Coupo__75A278F5");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.Property(e => e.RoleDisplayName).HasMaxLength(50);

                entity.Property(e => e.RoleName).HasMaxLength(50);

                entity.HasMany(d => d.Permission)
                    .WithMany(p => p.Role)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoleToPermissions",
                        l => l.HasOne<Permissions>().WithMany().HasForeignKey("PermissionId").HasConstraintName("FK_RoleToPermissions_Permissions"),
                        r => r.HasOne<Roles>().WithMany().HasForeignKey("RoleId").HasConstraintName("FK_RoleToPermissions_Roles"),
                        j =>
                        {
                            j.HasKey("RoleId", "PermissionId");

                            j.ToTable("RoleToPermissions");
                        });
            });

            modelBuilder.Entity<Specification>(entity =>
            {
                entity.Property(e => e.Flavor).HasMaxLength(50);

                entity.Property(e => e.Size).HasMaxLength(50);

                entity.HasOne(d => d.Dessert)
                    .WithMany(p => p.Specification)
                    .HasForeignKey(d => d.DessertId)
                    .HasConstraintName("FK__Specifica__Desse__5812160E");
            });

            modelBuilder.Entity<Teachers>(entity =>
            {
                entity.HasKey(e => e.TeacherId)
                    .HasName("PK__Teachers__EDF259646A7228C6");

                entity.Property(e => e.Academic)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Experience)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.License)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Specialty)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.TeacherImage)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TeacherName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}